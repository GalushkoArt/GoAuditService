// Code generated by MockGen. DO NOT EDIT.
// Source: ../../service/audit.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/galushkoart/go-audit-service/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAuditService is a mock of AuditService interface.
type MockAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditServiceMockRecorder
}

// MockAuditServiceMockRecorder is the mock recorder for MockAuditService.
type MockAuditServiceMockRecorder struct {
	mock *MockAuditService
}

// NewMockAuditService creates a new mock instance.
func NewMockAuditService(ctrl *gomock.Controller) *MockAuditService {
	mock := &MockAuditService{ctrl: ctrl}
	mock.recorder = &MockAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditService) EXPECT() *MockAuditServiceMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockAuditService) Insert(ctx context.Context, item *model.LogItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAuditServiceMockRecorder) Insert(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAuditService)(nil).Insert), ctx, item)
}
